/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IERC721 {
    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function tokenURI(uint256 id) external view returns (string memory);

    function supportsInterface(uint8[4] calldata _interface) external pure returns (bool);

    function balanceOf(address owner) external view returns (uint256);

    function ownerOf(uint256 id) external view returns (address);

    function safeTransferFrom(address from, address to, uint256 id) external;

    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) external;

    function transferFrom(address from, address to, uint256 id) external;

    function approve(address approved, uint256 id) external;

    function setApprovalForAll(address operator, bool approved) external;

    function getApproved(uint256 id) external returns (address);

    function isApprovedForAll(address owner, address operator) external returns (bool);

    error AlreadyMinted();

    error InvalidTokenId(uint256);

    error NotOwner(address, uint256, address);

    error NotApproved(uint256, address, address);

    error TransferToZero(uint256);

    error ReceiverRefused(address, uint256);
}

interface IOwnable {
    function owner() external view returns (address);

    function onlyOwner() external view;

    function transferOwnership(address new_owner) external;

    function renounceOwnership() external;

    error OwnableUnauthorizedAccount(address);

    error OwnableInvalidOwner(address);
}

interface ISeabrick is IERC721, IOwnable {
    function initialization(address owner) external;

    function totalSupply() external view returns (uint256);

    function burn(uint256 token_id) external;

    function mint(address to) external;

    error NotMinted();

    error NotBurned();

    error OnlyContractOwner();

    error AlreadyInit();
}
